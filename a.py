import sys
import serial
import serial.tools.list_ports
from PyQt5.QtWidgets import (
    QApplication, QWidget, QPushButton, QVBoxLayout,
    QHBoxLayout, QLabel, QComboBox, QTextEdit
)
from PyQt5.QtCore import Qt, QTimer


class RobotGUI(QWidget):
    def __init__(self):
        super().__init__()
        self.setWindowTitle("üöó ƒêi·ªÅu khi·ªÉn Robot Bluetooth - Quang Anh")
        self.resize(520, 450)

        self.serial = None
        self.init_ui()

    def init_ui(self):
        # --- Ti√™u ƒë·ªÅ ---
        self.title_label = QLabel("üë§ Ng∆∞·ªùi d√πng: Quang Anh")
        self.title_label.setAlignment(Qt.AlignCenter)
        self.title_label.setStyleSheet("font-size: 18px; font-weight: bold; color: blue")

        # --- C·ªïng COM ---
        self.port_label = QLabel("üîå Ch·ªçn c·ªïng COM:")
        self.port_combo = QComboBox()
        self.refresh_ports()

        self.connect_btn = QPushButton("K·∫øt n·ªëi")
        self.connect_btn.clicked.connect(self.toggle_connection)

        port_layout = QHBoxLayout()
        port_layout.addWidget(self.port_label)
        port_layout.addWidget(self.port_combo)
        port_layout.addWidget(self.connect_btn)

        # --- Kho·∫£ng c√°ch ---
        self.distance_label = QLabel("üìè Kho·∫£ng c√°ch: -- cm")
        self.distance_label.setStyleSheet("font-size: 16px; color: green")

        # --- ƒêi·ªÅu khi·ªÉn robot ---
        self.buttons = {
            'F': QPushButton("‚Üë Ti·∫øn"),
            'B': QPushButton("‚Üì L√πi"),
            'L': QPushButton("‚Üê Tr√°i"),
            'R': QPushButton("‚Üí Ph·∫£i"),
            'I': QPushButton("‚Üó Ti·∫øn-Ph·∫£i"),
            'G': QPushButton("‚Üñ Ti·∫øn-Tr√°i"),
            'J': QPushButton("‚Üô L√πi-Ph·∫£i"),
            'H': QPushButton("‚Üò L√πi-Tr√°i"),
            'S': QPushButton("‚ñ† D·ª´ng")
        }

        for cmd, btn in self.buttons.items():
            btn.clicked.connect(lambda _, c=cmd: self.send_command(c))

        top = QHBoxLayout()
        mid = QHBoxLayout()
        bot = QHBoxLayout()

        top.addWidget(self.buttons['G'])
        top.addWidget(self.buttons['F'])
        top.addWidget(self.buttons['I'])

        mid.addWidget(self.buttons['L'])
        mid.addWidget(self.buttons['S'])
        mid.addWidget(self.buttons['R'])

        bot.addWidget(self.buttons['H'])
        bot.addWidget(self.buttons['B'])
        bot.addWidget(self.buttons['J'])

        # --- Log hi·ªÉn th·ªã d·ªØ li·ªáu ---
        self.log_box = QTextEdit()
        self.log_box.setReadOnly(True)

        # --- Layout t·ªïng ---
        main_layout = QVBoxLayout()
        main_layout.addWidget(self.title_label)
        main_layout.addLayout(port_layout)
        main_layout.addWidget(self.distance_label)
        main_layout.addLayout(top)
        main_layout.addLayout(mid)
        main_layout.addLayout(bot)
        main_layout.addWidget(QLabel("üñ•Ô∏è Ph·∫£n h·ªìi t·ª´ Arduino:"))
        main_layout.addWidget(self.log_box)

        self.setLayout(main_layout)

        # --- Timer ƒë·ªçc d·ªØ li·ªáu ---
        self.timer = QTimer()
        self.timer.timeout.connect(self.read_serial_data)

    def refresh_ports(self):
        self.port_combo.clear()
        ports = serial.tools.list_ports.comports()
        for port in ports:
            self.port_combo.addItem(port.device)

    def toggle_connection(self):
        if self.serial and self.serial.is_open:
            self.serial.close()
            self.timer.stop()
            self.connect_btn.setText("K·∫øt n·ªëi")
            self.log_box.append("‚ùå ƒê√£ ng·∫Øt k·∫øt n·ªëi.")
        else:
            try:
                port = self.port_combo.currentText()
                self.serial = serial.Serial(port, 9600, timeout=0.1)
                self.connect_btn.setText("Ng·∫Øt")
                self.timer.start(100)
                self.log_box.append(f"‚úÖ ƒê√£ k·∫øt n·ªëi {port}")
            except Exception as e:
                self.log_box.append(f"L·ªói k·∫øt n·ªëi: {str(e)}")

    def send_command(self, command):
        if self.serial and self.serial.is_open:
            try:
                self.serial.write(command.encode())
                self.log_box.append(f"‚ñ∂ G·ª≠i l·ªánh: {command}")
            except Exception as e:
                self.log_box.append(f"L·ªói g·ª≠i: {str(e)}")
        else:
            self.log_box.append("‚ö†Ô∏è Ch∆∞a k·∫øt n·ªëi Bluetooth!")

    def read_serial_data(self):
        if self.serial and self.serial.in_waiting:
            try:
                data = self.serial.readline().decode().strip()
                if data:
                    self.log_box.append(f"‚Üê {data}")
                    # N·∫øu d·ªØ li·ªáu l√† s·ªë ‚Üí kho·∫£ng c√°ch
                    if data.replace('.', '').isdigit():
                        self.distance_label.setText(f"üìè Kho·∫£ng c√°ch: {data} cm")
                    elif data.startswith("D:"):
                        distance = data[2:].strip()
                        self.distance_label.setText(f"üìè Kho·∫£ng c√°ch: {distance} cm")
            except Exception as e:
                self.log_box.append(f"L·ªói ƒë·ªçc d·ªØ li·ªáu: {str(e)}")


if __name__ == '__main__':
    app = QApplication(sys.argv)
    window = RobotGUI()
    window.show()
    sys.exit(app.exec_())
